#!/usr/bin/env bash

if [ ! -f $HOME/.dm/config.json ]; then
    echo "Creating configuration files > $HOME/.dm"
    mkdir -pv $HOME/.dm/tmp && echo "{}" > $HOME/.dm/config.json
fi

if [ $# -eq 0 ]; then
    echo "No arguments supplied"
    # show help
fi

current_dir=$(pwd)

function up() {
    project_name=$1

    if [ -z "$project_name" ]; then
        project_name=$(basename `pwd`)
    fi

    execution_path=$(jq -r ".$project_name.execution_path" "$HOME/.dm/config.json")

    if [ "$execution_path" = "null" ]; then
        echo "Config not found for project name > $project_name"

        echo "Here is a list of available projects:"
        cat $HOME/.dm/config.json | jq -r 'keys[]'
        read -p "Project: " choice
        execution_path=$(jq -r ".$choice.execution_path" "$HOME/.dm/config.json")
        # exit 0
    fi

    if [ ! "$(pwd)" = "$execution_path" ]; then
        cd "$execution_path"
    fi

    down && docker-compose up -d && cd $current_dir
    if [ ! -f $HOME/.dm/tmp ]; then
        mkdir -pv $HOME/.dm/tmp
    fi
    echo "$project_name" > "$HOME/.dm/tmp/run"
}

function down() {
    if [ ! -z "$(docker ps -aq)" ]; then
        docker stop $(docker ps -aq) && docker rm $(docker ps -aq)
    fi

    if [ -f $HOME/.dm/tmp/run ]; then
        rm -rf "$HOME/.dm/tmp/run"
    fi
    if [ -f $HOME/.dm/tmp/service ]; then
        rm -rf "$HOME/.dm/tmp/service"
    fi
}

function logs() {
    project_name=$1

    if [ -z "$project_name" ]; then
        project_name=$(basename `pwd`)
    fi

    execution_path=$(jq -r ".$project_name.execution_path" "$HOME/.dm/config.json")

    if [ "$execution_path" = "null" ]; then
        echo "Config not found for project name > $project_name"

        echo "Here is a list of available projects:"
        cat $HOME/.dm/config.json | jq -r 'keys[]'
        read -p "Project: " choice
        execution_path=$(jq -r ".$choice.execution_path" "$HOME/.dm/config.json")
        # exit 0
    fi

    if [ ! "$(pwd)" = "$execution_path" ]; then
        cd "$execution_path"
    fi

    docker-compose logs && cd $current_dir
}

function run() {
    echo "$1" > "$HOME/.dm/tmp/service"
}

function rmi() {
    docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")
}

function bash() {
    docker ps -f status=running --format="{{.Names}}"
    echo ""
    read -p "Conatainer name: " container

    docker exec -it -e TERM=xterm-256color "$container" /bin/sh -c "bash"

    cd $current_dir
}

function raw() {
    project_name=$(cat $HOME/.dm/tmp/run)
    command=$(jq -r ".$project_name.raw.$1" "$HOME/.dm/config.json")

    eval "$command"
}

if [ ! -z "$(declare -f $1)" ]; then
    "$@"
else
    # run command from container
    if [ ! -f $HOME/.dm/tmp/run ]; then
        echo "No containers!"
        exit 0
    fi

    should_go_back=false
    project_name=$(cat $HOME/.dm/tmp/run)
    execution_path=$(jq -r ".$project_name.execution_path" "$HOME/.dm/config.json")

    if [ ! "$(pwd)" = "$execution_path" ]; then
        should_go_back=true
        cd "$execution_path"
    fi

    command="$1"
    shift

    application_path=$(jq -r ".$project_name.application_path" "$HOME/.dm/config.json")
    service_message=$project_name

    if [ -f $HOME/.dm/tmp/service ]; then
        service=$(cat $HOME/.dm/tmp/service)
        application_path="$application_path/$service"
        service_message="$service_message/$service"
    fi

    read -p "You are going to run command on $service_message. Are you sure? (Press n|N to abort) " choice
    case "$choice" in
        n|N ) exit 0;;
    esac

    sh=$(jq -r ".$project_name.commands.$command.sh" "$HOME/.dm/config.json")

    if [ "$sh" = "null" ]; then
        sh=$(jq -r ".$project_name.raw.$command" "$HOME/.dm/config.json")

        if [ "$sh" = "null" ]; then
            cmd="cd / && bash $@"
            docker exec -it -e TERM=xterm-256color "$container" /bin/sh -c "$cmd"
        else
            eval "$sh"
        fi
    else
        cmd="cd $application_path && "$sh" $@"

        container=$(jq -r ".$project_name.commands.$command.container" "$HOME/.dm/config.json")

        if [ "$container" = "null" ]; then
            echo -e "No command in config! Here are available containers, please pick one to work with.\n"
            docker ps -f status=running --format="{{.Names}}"
            echo ""
            read -p "Conatainer name: " container
        fi

        docker exec -it -e TERM=xterm-256color "$container" /bin/sh -c "$cmd"
    fi

    if [ $should_go_back ]; then
        cd $current_dir
    fi
fi

# vi: ft=sh
